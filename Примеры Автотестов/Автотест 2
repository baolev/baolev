package логика-1

import (
	"context"
	"fmt"
	uuid "github.com/пакет-1 для uuid"
	"github.com/пакет тестифай/require"
	"github.com/пакет тестифай/suite"
	"google.golang.org/grpc/metadata"
	"strconv"
	"testing"
	"time"
	"пакет для тестирования внутри проекта tests"
)

type "Сертификаты"_Suite struct {
	suite.Suite
	setup *tests.Setup
	s1    uuid.UUID
}

func Test_"Сертификаты"_Suite(t *testing.T) {
	suite.Run(t, new("Сертификаты"_Suite))
}
func (s *"Сертификаты"_Suite) SetupSuite() {
	err := setup.MigrationsExecute([]string{"false"}, "Адрес к запуску файла SQL для создания сертификата с необходимыми условиями")
	require.NoError(s.T(), err)
}

// 1. Отображение Сертификата

func (s *"Сертификаты"_Suite) Test_01() {
	ctx, cancel := context.WithTimeout(context.Background(), 60*time.Second)
	defer cancel()
	ctx = metadata.AppendToOutgoingContext(ctx, "Authorization", "Bearer "+tests.AccessToken-"Номер пользователя")
	
	//Запрос
	actResp, err := команда отправки запроса сертификата (ctx, &pb.получить_сертификат{
		Filter: &pb.получить_сертификат Request_Filter{
			Условие: 1,
			Для сертификата-1: []*pb.UUID{
				{
					Value: "8cd34927-9b23-4e4c-a486-35327c6799a7",
				},
			},
			Для сертификата-2: &pb.UUID{Value: "b51952aa-11ca-456a-9d68-263a86c77be8"},
		},
	})
	
	//Ожидаемый результат
	require.NoError(s.T(), err)
	expResp := pb.получить_сертификат Responce{
		Сертификаты: []*pb.Сертификаты{
			{
				Обьект Гуид: &pb.UUID{Value: "1c95a08a-25ae-4c84-81ce-f01961fc0565"},
				Name:           "Тестовое имя-1",
				Обьект код:       "1955-170",
			},
		},
	}

	require.Equal(s.T(), actResp.Сертификат[0].Обьект код, expResp.Сертификат[0].Обьект Гуид)
	require.Equal(s.T(), actResp.Сертификат[0].Name, expResp.Сертификат[0].Name)
	require.Equal(s.T(), actResp.Сертификат[0].Обьект код, expResp.Сертификат[0].Обьект Гуид)
}