package логика-1

import (
	"context"
	"fmt"
	uuid "github.com/пакет-1 для uuid"
	"github.com/пакет тестифай/require"
	"github.com/пакет тестифай/suite"
	"google.golang.org/grpc/metadata"
	"strconv"
	"testing"
	"time"
	"пакет для тестирования внутри проекта tests"
)

type Функционал_Suite struct {
	suite.Suite
	setup *tests.Setup
	s1    uuid.UUID
}

func Test_Функционал_Suite(t *testing.T) {
	suite.Run(t, new(Функционал_Suite))
}

func (s *Функционал_Suite) TearDownSuite() {
	err := setup.миграция([]string{"SQL что удаляет записи из бд после выполнения теста"}, "false")
	require.NoError(s.T(), err)
	err = setup.удаление по гуид([]string{"68d9b29d-314f-46d0-ac1c-3150e20b93f1"})
	require.NoError(s.T(), err)
}


// 1. Тестовый пример
func (s *Функционал_Suite) Test_1() {

	err := setup.миграция([]string{"SQL создания миграции"}, "false")
	require.NoError(s.T(), err, "Failed to execute migrations")

	ctx, cancel, err := setup.TestPrecondition(tests.AccessToken-номер пользователя, []string{"false"}, "false")
	require.NoError(s.T(), err, "Failed to setup test precondition")
	defer cancel()

	request := &pb.Функционал_Request{
		GUID: &pb.UUID{
			Value: "2701ed50-ec35-4abb-97f5-f4a0d8a1ac78",
		},
		Данные 1: &pb.UUID{
			Value: "1b96f120-98ae-4ed3-84ef-845989e0073b",
		},
		Наименования: []*pb.Инфа о продукте{
			{
				Инфа 1: "1",
				инфа 2: "2",
				инфа 3: "3",
			},
		},
	}

	_, err = setup.GRPCClient.OrderClient.Функционал(ctx, request)
	require.Error(s.T(), err, "Сообщение об ошибке"
	require.Contains(s.T(), err.Error(), "Сообщение об ошибке", 
	"Error message does not match expected")

	sqlReq := `
		SELECT COUNT(*) 
		FROM таблицы 1 
		WHERE "инфа 1" = '1' AND
			  "гуид 1" = '4da05ac3-1ea5-4640-8e66-a16d5a9a8658' AND
			  "гуид 2" = '2c97a922-f91e-4f46-ac06-3784ebbf6b69' AND
			  "инфа 2" = '2' AND
			  "инфа 3" = '3'
	`
	err = setup.CompareResult(0, sqlReq)
	require.NoError(s.T(), err, "Failed to compare result")
}
